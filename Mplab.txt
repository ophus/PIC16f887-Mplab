#include <xc.h>
#include "I2C_LCD.h"
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

// CONFIG
#pragma config FOSC = HS
#pragma config WDTE = OFF
#pragma config PWRTE = OFF
#pragma config BOREN = ON
#pragma config LVP = OFF
#pragma config CPD = OFF
#pragma config WRT = OFF
#pragma config CP = OFF
#pragma config MCLRE = ON

#define _XTAL_FREQ 20000000

// Button definitions
#define BTN_AUTO      PORTDbits.RD4
#define BTN_MANUAL    PORTDbits.RD5
#define BTN_MANUAL_F  PORTDbits.RD6
#define BTN_MANUAL_R  PORTDbits.RD7

#define MOTOR_FWD     PORTBbits.RB0
#define MOTOR_REV     PORTBbits.RB1

// Global variables
unsigned int thresholdRain = 500;
unsigned int thresholdLight = 500;
unsigned char isAutoMode = 1;

// UART variables - Gi?m kích th??c buffer ?? ti?t ki?m RAM
char uartBuffer[32];  // Gi?m t? 64 xu?ng 32
unsigned char uartIdx = 0;
bool newUARTData = false;

// Function prototypes
void ADC_Init();
unsigned int ADC_Read(unsigned char channel);
void UART_Init();
void UART_SendChar(char data);
void UART_SendString(const char *s);
const char* Get_Motor_State();
void Motor_Run(unsigned char direction);
void Display_Mode(unsigned char isAuto);
void Display_Sensor(unsigned int lightVal, unsigned int rainVal);
unsigned char Button_Debounce(unsigned char bitValue);
void Handle_Auto_Button();
void Handle_Manual_Button();
void Send_Thresholds();
void Process_UART_Command();

// ADC Initialization
void ADC_Init() {
    ADCON1 = 0b10001110; // AN0, AN1 analog, rest digital
    TRISA |= 0x03;       // RA0, RA1 input
    ADCON0 = 0b00000001; // ADC enable, channel 0
    __delay_ms(2);
}

// ADC Read
unsigned int ADC_Read(unsigned char channel) {
    ADCON0bits.CHS = channel;
    __delay_us(20);
    ADCON0bits.ADON = 1;
    __delay_us(10);
    ADCON0bits.GO_nDONE = 1;
    while (ADCON0bits.GO_nDONE);
    return ((unsigned int)(ADRESH << 8) | ADRESL);
}

// UART Initialization
void UART_Init() {
    TRISCbits.TRISC6 = 0;  // TX pin output
    TRISCbits.TRISC7 = 1;  // RX pin input
    SPBRG = 129;           // 9600 baud for 20MHz
    TXSTAbits.BRGH = 1;    // High speed baud rate
    TXSTAbits.SYNC = 0;    // Asynchronous mode
    RCSTAbits.SPEN = 1;    // Serial port enable
    TXSTAbits.TXEN = 1;    // Transmit enable
    RCSTAbits.CREN = 1;    // Continuous receive enable
    PIE1bits.RCIE = 1;     // Enable UART receive interrupt
    INTCONbits.PEIE = 1;   // Enable peripheral interrupts
    INTCONbits.GIE = 1;    // Enable global interrupts
}

// UART Send Character
void UART_SendChar(char data) {
    while (!PIR1bits.TXIF);
    TXREG = data;
}

// UART Send String
void UART_SendString(const char *s) {
    while (*s) UART_SendChar(*s++);
}

// Get Motor State
const char* Get_Motor_State() {
    if (MOTOR_FWD == 1 && MOTOR_REV == 0) return "FWD";
    else if (MOTOR_FWD == 0 && MOTOR_REV == 1) return "REV";
    else return "STOP";
}

// Run Motor
void Motor_Run(unsigned char direction) {
    if (direction) {
        MOTOR_FWD = 1;
        MOTOR_REV = 0;
        LCD_Set_Cursor(2, 12);
        LCD_Write_String("FWD   ");
    } else {
        MOTOR_FWD = 0;
        MOTOR_REV = 1;
        LCD_Set_Cursor(2, 12);
        LCD_Write_String("REV   ");
    }
    __delay_ms(3000);  // Gi?m delay t? 5000 xu?ng 3000
    MOTOR_FWD = 0;
    MOTOR_REV = 0;
    LCD_Set_Cursor(2, 12);
    LCD_Write_String("STOP  ");
}

// Stop Motor immediately
void Motor_Stop() {
    MOTOR_FWD = 0;
    MOTOR_REV = 0;
    LCD_Set_Cursor(2, 12);
    LCD_Write_String("STOP  ");
}

// Display Mode
void Display_Mode(unsigned char isAuto) {
    LCD_Clear();
    LCD_Set_Cursor(1, 1);
    LCD_Write_String(isAuto ? "Mode: AUTO" : "Mode: MANUAL");
    __delay_ms(1500);  // Gi?m delay
    LCD_Clear();
}

// Display Sensor Values
void Display_Sensor(unsigned int lightVal, unsigned int rainVal) {
    char line[17];
    LCD_Clear();
    LCD_Set_Cursor(1, 1);
    sprintf(line, "L:%u R:%u", lightVal, rainVal);
    LCD_Write_String(line);
    LCD_Set_Cursor(2, 1);
    sprintf(line, "T:%u/%u %s", thresholdRain, thresholdLight, Get_Motor_State());
    LCD_Write_String(line);
}

// Button Debounce
unsigned char Button_Debounce(unsigned char bitValue) {
    if (bitValue == 0) {
        __delay_ms(20);
        if (bitValue == 0) return 1;
    }
    return 0;
}

// Handle Auto Button
void Handle_Auto_Button() {
    static unsigned char prevAutoState = 1;
    unsigned char currentState = BTN_AUTO;

    if (prevAutoState == 1 && Button_Debounce(BTN_AUTO)){
        isAutoMode = 1;
        Display_Mode(isAutoMode);
    }
    prevAutoState = currentState;
}

// Handle Manual Button
void Handle_Manual_Button() {
    static unsigned char prevManualState = 1;
    unsigned char currentState = BTN_MANUAL;

    if (prevManualState == 1 && Button_Debounce(BTN_MANUAL)){
        isAutoMode = 0;
        Display_Mode(isAutoMode);
    }
    prevManualState = currentState;
}

// Send Thresholds via UART
void Send_Thresholds() {
    char buffer[32];  // Gi?m kích th??c buffer
    sprintf(buffer, "THR=%u;THL=%u\r\n", thresholdRain, thresholdLight);
    UART_SendString(buffer);
}

// Process UART Commands
void Process_UART_Command() {
    if (strncmp(uartBuffer, "THR=", 4) == 0) {
        sscanf(uartBuffer, "THR=%u", &thresholdRain);
        LCD_Clear();
        LCD_Set_Cursor(1, 1);
        LCD_Write_String("Rain Updated");
        __delay_ms(800);
    } 
    else if (strncmp(uartBuffer, "THL=", 4) == 0) {
        sscanf(uartBuffer, "THL=%u", &thresholdLight);
        LCD_Clear();
        LCD_Set_Cursor(1, 1);
        LCD_Write_String("Light Updated");
        __delay_ms(800);
    } 
    else if (strcmp(uartBuffer, "FWD") == 0 && !isAutoMode) {
        Motor_Run(1);
    } 
    else if (strcmp(uartBuffer, "REV") == 0 && !isAutoMode) {
        Motor_Run(0);
    }
    else if (strcmp(uartBuffer, "STOP") == 0 && !isAutoMode) {
        Motor_Stop();
    }
    else if (strcmp(uartBuffer, "MODE=AUTO") == 0) {
        isAutoMode = 1;
        Display_Mode(isAutoMode);
    } 
    else if (strcmp(uartBuffer, "MODE=MANUAL") == 0) {
        isAutoMode = 0;
        Display_Mode(isAutoMode);
    }
}

// Interrupt Service Routine
void __interrupt() ISR(void) {
    if (PIR1bits.RCIF) {
        char c = RCREG;
        
        // Clear error flags if any
        if (RCSTAbits.OERR) {
            RCSTAbits.CREN = 0;
            RCSTAbits.CREN = 1;
        }
        if (RCSTAbits.FERR) {
            c = RCREG; // Read to clear FERR
        }
        
        if (c == '\n' || c == '\r') {
            if (uartIdx > 0) {  // Only process if buffer has data
                uartBuffer[uartIdx] = '\0';
                newUARTData = true;
                uartIdx = 0;
            }
        } else if (uartIdx < sizeof(uartBuffer) - 1) {
            uartBuffer[uartIdx++] = c;
        } else {
            // Buffer overflow, reset
            uartIdx = 0;
        }
        
        PIR1bits.RCIF = 0;
    }
}

// Main Function
void main() {
    unsigned int rainVal, lightVal;
    
    // Initialize ports
    TRISD = 0xFF;                  // PORTD all input
    TRISB &= 0b11111100;           // RB0, RB1 output
    PORTB = 0x00;

    // Initialize peripherals
    ADC_Init();
    UART_Init();
    I2C_Master_Init(100000);
    LCD_Init();
    __delay_ms(200);

    // Show init message
    LCD_Clear();
    LCD_Set_Cursor(1, 1);
    LCD_Write_String("System Ready");
    __delay_ms(1000);
    LCD_Clear();

    while (1) {
        // Read sensor values
        rainVal = ADC_Read(1);
        lightVal = ADC_Read(0);

        // Handle mode buttons
        Handle_Auto_Button();
        Handle_Manual_Button();

        // Display sensor values
        Display_Sensor(lightVal, rainVal);

        // Auto mode logic
        if (isAutoMode) {
            if (rainVal > thresholdRain || lightVal > thresholdLight) {
                Motor_Run(1);
            }
        } 
        // Manual mode logic
        else {
            if (!Button_Debounce(BTN_MANUAL_F)) Motor_Run(1);
            if (!Button_Debounce(BTN_MANUAL_R)) Motor_Run(0);
        }

        // Send data to ESP32 - S? d?ng buffer nh? h?n
        char sendBuffer[80];
        sprintf(sendBuffer, "Mode:%s,R:%u,L:%u,THR:%u,THL:%u,Motor:%s\r\n",
                isAutoMode ? "AUTO" : "MANUAL", rainVal, lightVal, 
                thresholdRain, thresholdLight, Get_Motor_State());
        UART_SendString(sendBuffer);

        // Process received commands from ESP32
        if (newUARTData) {
            newUARTData = false;
            Process_UART_Command();
        }
        
        __delay_ms(100);  // T?ng delay m?t chút ?? ?n ??nh
    }
}
